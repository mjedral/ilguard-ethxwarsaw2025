/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ILGuardManager {
  export type PositionStruct = {
    owner: AddressLike;
    tokenId: BigNumberish;
    tickLower: BigNumberish;
    tickUpper: BigNumberish;
    isProtected: boolean;
    isPaused: boolean;
    liquidity: BigNumberish;
    createdAt: BigNumberish;
    lastRebalanceAt: BigNumberish;
  };

  export type PositionStructOutput = [
    owner: string,
    tokenId: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    isProtected: boolean,
    isPaused: boolean,
    liquidity: bigint,
    createdAt: bigint,
    lastRebalanceAt: bigint
  ] & {
    owner: string;
    tokenId: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    isProtected: boolean;
    isPaused: boolean;
    liquidity: bigint;
    createdAt: bigint;
    lastRebalanceAt: bigint;
  };
}

export interface ILGuardManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BOT_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "GUARDIAN_ROLE"
      | "canRebalance"
      | "cooldownPeriod"
      | "deposit"
      | "dragonSwapPositionManager"
      | "dragonSwapRouter"
      | "emergencyPause"
      | "emergencyWithdraw"
      | "getDailyActionCount"
      | "getPosition"
      | "getRoleAdmin"
      | "getUserPositions"
      | "grantRole"
      | "hasRole"
      | "maxActionsPerDay"
      | "minDepositAmount"
      | "pausePosition"
      | "paused"
      | "positions"
      | "rebalance"
      | "renounceRole"
      | "revokeRole"
      | "setCooldownPeriod"
      | "setMaxActionsPerDay"
      | "setMinDepositAmount"
      | "setSlippageTolerance"
      | "slippageTolerance"
      | "supportsInterface"
      | "tickSpacing"
      | "toggleProtection"
      | "token0"
      | "token1"
      | "unpause"
      | "unpausePosition"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CooldownPeriodUpdated"
      | "Deposited"
      | "EmergencyWithdraw"
      | "MaxActionsPerDayUpdated"
      | "MinDepositAmountUpdated"
      | "Paused"
      | "PositionPaused"
      | "PositionUnpaused"
      | "ProtectionToggled"
      | "Rebalanced"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SlippageToleranceUpdated"
      | "Unpaused"
      | "Withdrawn"
  ): EventFragment;

  encodeFunctionData(functionFragment: "BOT_ROLE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GUARDIAN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canRebalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cooldownPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "dragonSwapPositionManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "dragonSwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDailyActionCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPositions",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxActionsPerDay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pausePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalance",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCooldownPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxActionsPerDay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDepositAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlippageTolerance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slippageTolerance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toggleProtection",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpausePosition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "BOT_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GUARDIAN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canRebalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dragonSwapPositionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dragonSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDailyActionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxActionsPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCooldownPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxActionsPerDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlippageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slippageTolerance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toggleProtection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpausePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace CooldownPeriodUpdatedEvent {
  export type InputTuple = [oldPeriod: BigNumberish, newPeriod: BigNumberish];
  export type OutputTuple = [oldPeriod: bigint, newPeriod: bigint];
  export interface OutputObject {
    oldPeriod: bigint;
    newPeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    user: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    tickLower: BigNumberish,
    tickUpper: BigNumberish,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    user: string,
    amount0: bigint,
    amount1: bigint,
    tickLower: bigint,
    tickUpper: bigint,
    liquidity: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    user: string;
    amount0: bigint;
    amount1: bigint;
    tickLower: bigint;
    tickUpper: bigint;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyWithdrawEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    user: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    user: string,
    amount0: bigint,
    amount1: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    user: string;
    amount0: bigint;
    amount1: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxActionsPerDayUpdatedEvent {
  export type InputTuple = [oldMax: BigNumberish, newMax: BigNumberish];
  export type OutputTuple = [oldMax: bigint, newMax: bigint];
  export interface OutputObject {
    oldMax: bigint;
    newMax: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinDepositAmountUpdatedEvent {
  export type InputTuple = [oldAmount: BigNumberish, newAmount: BigNumberish];
  export type OutputTuple = [oldAmount: bigint, newAmount: bigint];
  export interface OutputObject {
    oldAmount: bigint;
    newAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionPausedEvent {
  export type InputTuple = [positionId: BigNumberish, user: AddressLike];
  export type OutputTuple = [positionId: bigint, user: string];
  export interface OutputObject {
    positionId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PositionUnpausedEvent {
  export type InputTuple = [positionId: BigNumberish, user: AddressLike];
  export type OutputTuple = [positionId: bigint, user: string];
  export interface OutputObject {
    positionId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtectionToggledEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    user: AddressLike,
    isProtected: boolean
  ];
  export type OutputTuple = [
    positionId: bigint,
    user: string,
    isProtected: boolean
  ];
  export interface OutputObject {
    positionId: bigint;
    user: string;
    isProtected: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RebalancedEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    user: AddressLike,
    oldTickLower: BigNumberish,
    oldTickUpper: BigNumberish,
    newTickLower: BigNumberish,
    newTickUpper: BigNumberish,
    reason: BigNumberish,
    feesCollected: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    user: string,
    oldTickLower: bigint,
    oldTickUpper: bigint,
    newTickLower: bigint,
    newTickUpper: bigint,
    reason: bigint,
    feesCollected: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    user: string;
    oldTickLower: bigint;
    oldTickUpper: bigint;
    newTickLower: bigint;
    newTickUpper: bigint;
    reason: bigint;
    feesCollected: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlippageToleranceUpdatedEvent {
  export type InputTuple = [
    oldTolerance: BigNumberish,
    newTolerance: BigNumberish
  ];
  export type OutputTuple = [oldTolerance: bigint, newTolerance: bigint];
  export interface OutputObject {
    oldTolerance: bigint;
    newTolerance: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawnEvent {
  export type InputTuple = [
    positionId: BigNumberish,
    user: AddressLike,
    amount0: BigNumberish,
    amount1: BigNumberish,
    feesCollected: BigNumberish
  ];
  export type OutputTuple = [
    positionId: bigint,
    user: string,
    amount0: bigint,
    amount1: bigint,
    feesCollected: bigint
  ];
  export interface OutputObject {
    positionId: bigint;
    user: string;
    amount0: bigint;
    amount1: bigint;
    feesCollected: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ILGuardManager extends BaseContract {
  connect(runner?: ContractRunner | null): ILGuardManager;
  waitForDeployment(): Promise<this>;

  interface: ILGuardManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BOT_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GUARDIAN_ROLE: TypedContractMethod<[], [string], "view">;

  canRebalance: TypedContractMethod<
    [positionId: BigNumberish],
    [boolean],
    "view"
  >;

  cooldownPeriod: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<
    [
      amount0: BigNumberish,
      amount1: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  dragonSwapPositionManager: TypedContractMethod<[], [string], "view">;

  dragonSwapRouter: TypedContractMethod<[], [string], "view">;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getDailyActionCount: TypedContractMethod<
    [positionId: BigNumberish],
    [bigint],
    "view"
  >;

  getPosition: TypedContractMethod<
    [positionId: BigNumberish],
    [ILGuardManager.PositionStructOutput],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getUserPositions: TypedContractMethod<
    [user: AddressLike],
    [bigint[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  maxActionsPerDay: TypedContractMethod<[], [bigint], "view">;

  minDepositAmount: TypedContractMethod<[], [bigint], "view">;

  pausePosition: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  paused: TypedContractMethod<[], [boolean], "view">;

  positions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        owner: string;
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        isProtected: boolean;
        isPaused: boolean;
        liquidity: bigint;
        createdAt: bigint;
        lastRebalanceAt: bigint;
      }
    ],
    "view"
  >;

  rebalance: TypedContractMethod<
    [
      positionId: BigNumberish,
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      reason: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCooldownPeriod: TypedContractMethod<
    [newCooldownPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxActionsPerDay: TypedContractMethod<
    [newMaxActions: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinDepositAmount: TypedContractMethod<
    [newMinAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSlippageTolerance: TypedContractMethod<
    [newTolerance: BigNumberish],
    [void],
    "nonpayable"
  >;

  slippageTolerance: TypedContractMethod<[], [bigint], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tickSpacing: TypedContractMethod<[], [bigint], "view">;

  toggleProtection: TypedContractMethod<
    [positionId: BigNumberish, isProtected: boolean],
    [void],
    "nonpayable"
  >;

  token0: TypedContractMethod<[], [string], "view">;

  token1: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unpausePosition: TypedContractMethod<
    [positionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      positionId: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BOT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GUARDIAN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canRebalance"
  ): TypedContractMethod<[positionId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "cooldownPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      amount0: BigNumberish,
      amount1: BigNumberish,
      tickLower: BigNumberish,
      tickUpper: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dragonSwapPositionManager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "dragonSwapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getDailyActionCount"
  ): TypedContractMethod<[positionId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPosition"
  ): TypedContractMethod<
    [positionId: BigNumberish],
    [ILGuardManager.PositionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserPositions"
  ): TypedContractMethod<[user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxActionsPerDay"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minDepositAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pausePosition"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "positions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        bigint,
        bigint,
        bigint
      ] & {
        owner: string;
        tokenId: bigint;
        tickLower: bigint;
        tickUpper: bigint;
        isProtected: boolean;
        isPaused: boolean;
        liquidity: bigint;
        createdAt: bigint;
        lastRebalanceAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rebalance"
  ): TypedContractMethod<
    [
      positionId: BigNumberish,
      newTickLower: BigNumberish,
      newTickUpper: BigNumberish,
      reason: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCooldownPeriod"
  ): TypedContractMethod<
    [newCooldownPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxActionsPerDay"
  ): TypedContractMethod<[newMaxActions: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinDepositAmount"
  ): TypedContractMethod<[newMinAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSlippageTolerance"
  ): TypedContractMethod<[newTolerance: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "slippageTolerance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tickSpacing"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "toggleProtection"
  ): TypedContractMethod<
    [positionId: BigNumberish, isProtected: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token0"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "token1"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpausePosition"
  ): TypedContractMethod<[positionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      positionId: BigNumberish,
      amount0Min: BigNumberish,
      amount1Min: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CooldownPeriodUpdated"
  ): TypedContractEvent<
    CooldownPeriodUpdatedEvent.InputTuple,
    CooldownPeriodUpdatedEvent.OutputTuple,
    CooldownPeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Deposited"
  ): TypedContractEvent<
    DepositedEvent.InputTuple,
    DepositedEvent.OutputTuple,
    DepositedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyWithdraw"
  ): TypedContractEvent<
    EmergencyWithdrawEvent.InputTuple,
    EmergencyWithdrawEvent.OutputTuple,
    EmergencyWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "MaxActionsPerDayUpdated"
  ): TypedContractEvent<
    MaxActionsPerDayUpdatedEvent.InputTuple,
    MaxActionsPerDayUpdatedEvent.OutputTuple,
    MaxActionsPerDayUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinDepositAmountUpdated"
  ): TypedContractEvent<
    MinDepositAmountUpdatedEvent.InputTuple,
    MinDepositAmountUpdatedEvent.OutputTuple,
    MinDepositAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PositionPaused"
  ): TypedContractEvent<
    PositionPausedEvent.InputTuple,
    PositionPausedEvent.OutputTuple,
    PositionPausedEvent.OutputObject
  >;
  getEvent(
    key: "PositionUnpaused"
  ): TypedContractEvent<
    PositionUnpausedEvent.InputTuple,
    PositionUnpausedEvent.OutputTuple,
    PositionUnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ProtectionToggled"
  ): TypedContractEvent<
    ProtectionToggledEvent.InputTuple,
    ProtectionToggledEvent.OutputTuple,
    ProtectionToggledEvent.OutputObject
  >;
  getEvent(
    key: "Rebalanced"
  ): TypedContractEvent<
    RebalancedEvent.InputTuple,
    RebalancedEvent.OutputTuple,
    RebalancedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SlippageToleranceUpdated"
  ): TypedContractEvent<
    SlippageToleranceUpdatedEvent.InputTuple,
    SlippageToleranceUpdatedEvent.OutputTuple,
    SlippageToleranceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawn"
  ): TypedContractEvent<
    WithdrawnEvent.InputTuple,
    WithdrawnEvent.OutputTuple,
    WithdrawnEvent.OutputObject
  >;

  filters: {
    "CooldownPeriodUpdated(uint256,uint256)": TypedContractEvent<
      CooldownPeriodUpdatedEvent.InputTuple,
      CooldownPeriodUpdatedEvent.OutputTuple,
      CooldownPeriodUpdatedEvent.OutputObject
    >;
    CooldownPeriodUpdated: TypedContractEvent<
      CooldownPeriodUpdatedEvent.InputTuple,
      CooldownPeriodUpdatedEvent.OutputTuple,
      CooldownPeriodUpdatedEvent.OutputObject
    >;

    "Deposited(uint256,address,uint256,uint256,int24,int24,uint128)": TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;
    Deposited: TypedContractEvent<
      DepositedEvent.InputTuple,
      DepositedEvent.OutputTuple,
      DepositedEvent.OutputObject
    >;

    "EmergencyWithdraw(uint256,address,uint256,uint256)": TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;
    EmergencyWithdraw: TypedContractEvent<
      EmergencyWithdrawEvent.InputTuple,
      EmergencyWithdrawEvent.OutputTuple,
      EmergencyWithdrawEvent.OutputObject
    >;

    "MaxActionsPerDayUpdated(uint256,uint256)": TypedContractEvent<
      MaxActionsPerDayUpdatedEvent.InputTuple,
      MaxActionsPerDayUpdatedEvent.OutputTuple,
      MaxActionsPerDayUpdatedEvent.OutputObject
    >;
    MaxActionsPerDayUpdated: TypedContractEvent<
      MaxActionsPerDayUpdatedEvent.InputTuple,
      MaxActionsPerDayUpdatedEvent.OutputTuple,
      MaxActionsPerDayUpdatedEvent.OutputObject
    >;

    "MinDepositAmountUpdated(uint256,uint256)": TypedContractEvent<
      MinDepositAmountUpdatedEvent.InputTuple,
      MinDepositAmountUpdatedEvent.OutputTuple,
      MinDepositAmountUpdatedEvent.OutputObject
    >;
    MinDepositAmountUpdated: TypedContractEvent<
      MinDepositAmountUpdatedEvent.InputTuple,
      MinDepositAmountUpdatedEvent.OutputTuple,
      MinDepositAmountUpdatedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PositionPaused(uint256,address)": TypedContractEvent<
      PositionPausedEvent.InputTuple,
      PositionPausedEvent.OutputTuple,
      PositionPausedEvent.OutputObject
    >;
    PositionPaused: TypedContractEvent<
      PositionPausedEvent.InputTuple,
      PositionPausedEvent.OutputTuple,
      PositionPausedEvent.OutputObject
    >;

    "PositionUnpaused(uint256,address)": TypedContractEvent<
      PositionUnpausedEvent.InputTuple,
      PositionUnpausedEvent.OutputTuple,
      PositionUnpausedEvent.OutputObject
    >;
    PositionUnpaused: TypedContractEvent<
      PositionUnpausedEvent.InputTuple,
      PositionUnpausedEvent.OutputTuple,
      PositionUnpausedEvent.OutputObject
    >;

    "ProtectionToggled(uint256,address,bool)": TypedContractEvent<
      ProtectionToggledEvent.InputTuple,
      ProtectionToggledEvent.OutputTuple,
      ProtectionToggledEvent.OutputObject
    >;
    ProtectionToggled: TypedContractEvent<
      ProtectionToggledEvent.InputTuple,
      ProtectionToggledEvent.OutputTuple,
      ProtectionToggledEvent.OutputObject
    >;

    "Rebalanced(uint256,address,int24,int24,int24,int24,uint8,uint256)": TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;
    Rebalanced: TypedContractEvent<
      RebalancedEvent.InputTuple,
      RebalancedEvent.OutputTuple,
      RebalancedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SlippageToleranceUpdated(uint256,uint256)": TypedContractEvent<
      SlippageToleranceUpdatedEvent.InputTuple,
      SlippageToleranceUpdatedEvent.OutputTuple,
      SlippageToleranceUpdatedEvent.OutputObject
    >;
    SlippageToleranceUpdated: TypedContractEvent<
      SlippageToleranceUpdatedEvent.InputTuple,
      SlippageToleranceUpdatedEvent.OutputTuple,
      SlippageToleranceUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawn(uint256,address,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
    Withdrawn: TypedContractEvent<
      WithdrawnEvent.InputTuple,
      WithdrawnEvent.OutputTuple,
      WithdrawnEvent.OutputObject
    >;
  };
}
